 datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
 }

 generator client {
   provider = "prisma-client-js"
 }



enum UserRole {
  ADMIN
  HOST
  GUARD
}

 model User {
   user_id       Int       @id @default(autoincrement())
   name          String
   email         String    @unique
   phone_number  String
   password_hash String
   role          UserRole  @default(HOST)
   created_at    DateTime  @default(now())
   updated_at    DateTime  @updatedAt

   visitors         Visitor[]      @relation("HostVisitors")
   created_visitors Visitor[]      @relation("GuardCreatedVisitors")
   passes           Pass[]         @relation("UserPasses")
   notifications    Notification[] @relation("UserNotifications")
 }

enum VisitorStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

 model Visitor {
   visitor_id        Int           @id @default(autoincrement())
   name              String
   phone_number      String
   email             String
   purpose_of_visit  String
   host_id           Int
   created_by_guard_id Int?        
   status            VisitorStatus @default(PENDING)
   entry_time        DateTime?
   exit_time         DateTime?
   created_at        DateTime      @default(now())
   updated_at        DateTime      @updatedAt

   host            User     @relation("HostVisitors",        fields: [host_id],           references: [user_id])
   created_by_guard User?   @relation("GuardCreatedVisitors", fields: [created_by_guard_id], references: [user_id])
   passes          Pass[]   @relation("VisitorPasses")
   notifications   Notification[] @relation("VisitorNotifications")
 }

 model Pass {
   pass_id         Int       @id @default(autoincrement())
   visitor_id      Int
   qr_code_data    String
   created_at      DateTime  @default(now())
   expiry_time     DateTime
   approved_at     DateTime?
   approved_by     Int?

   visitor          Visitor @relation("VisitorPasses", fields: [visitor_id], references: [visitor_id])
   approved_by_user User?   @relation("UserPasses",    fields: [approved_by], references: [user_id])
 }

 model Notification {
   notification_id Int       @id @default(autoincrement())
   recipient_id    Int
   visitor_id      Int?      // now that this column really exists
   content         String
   created_at      DateTime  @default(now())

   recipient User     @relation("UserNotifications",  fields: [recipient_id], references: [user_id])
   visitor   Visitor? @relation("VisitorNotifications", fields: [visitor_id], references: [visitor_id])
 }
